const Student = require("../models/Student");
const User = require("../models/User");
const moment = require("moment-timezone");

// Th√™m sinh vi√™n m·ªõi
const addStudent = async (studentData) => {
    // Ki·ªÉm tra n·∫øu c√≥ dateOfBirth th√¨ chuy·ªÉn v·ªÅ m√∫i gi·ªù Vi·ªát Nam
    if (studentData.dateOfBirth) {
        studentData.dateOfBirth = moment
            .tz(studentData.dateOfBirth, "Asia/Ho_Chi_Minh")
            .startOf("day") // üî• ƒê·∫∑t v·ªÅ 00:00:00 ƒë·ªÉ kh√¥ng b·ªã l·ªách gi·ªù
            .toDate();
    }
    console.log("Processed dateOfBirth:", studentData.dateOfBirth); // ‚úÖ Ki·ªÉm tra gi√° tr·ªã tr∆∞·ªõc khi l∆∞u

    const newStudent = new Student(studentData);
    return await newStudent.save();
};

// L·∫•y danh s√°ch t·∫•t c·∫£ sinh vi√™n
const getStudents = async () => {
    return await Student.find().populate("department"); /*.populate("grades");*/
};

// L·∫•y th√¥ng tin sinh vi√™n theo ID
const getStudentById = async (studentId) => {
    return await Student.findById(studentId)
        .populate("department")
        .populate("grades");
};

// C·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n
const updateStudent = async (studentId, studentData) => {
    // Ki·ªÉm tra n·∫øu c√≥ dateOfBirth th√¨ chuy·ªÉn v·ªÅ m√∫i gi·ªù Vi·ªát Nam
    if (studentData.dateOfBirth) {
        studentData.dateOfBirth = moment
            .tz(studentData.dateOfBirth, "Asia/Ho_Chi_Minh")
            .toDate();
    }
    return await Student.findByIdAndUpdate(studentId, studentData, {
        new: true,
    });
};

// X√≥a sinh vi√™n
const deleteStudent = async (studentId) => {
    return await Student.findByIdAndDelete(studentId);
};
const getStudentsWithoutUser = async () => {
    // L·∫•y danh s√°ch ID c·ªßa Student ƒë√£ c√≥ t√†i kho·∫£n User
    const userStudentIds = await User.find({
        student: { $exists: true },
    }).distinct("student");
    // L·ªçc c√°c Student ch∆∞a c√≥ t√†i kho·∫£n User
    return Student.find({ _id: { $nin: userStudentIds } });
};

module.exports = {
    addStudent,
    getStudentById,
    getStudents,
    updateStudent,
    deleteStudent,
    getStudentsWithoutUser,
};
